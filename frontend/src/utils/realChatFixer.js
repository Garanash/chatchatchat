// –†–µ–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏—Å–ø—Ä–∞–≤–∏—Ç–µ–ª—å Chat.js
// –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∫ —Ñ–∞–π–ª—É Chat.js

export const applyRealFixesToChatJS = async (instructions) => {
  console.log('üîß –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫ Chat.js...');
  
  try {
    // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª Chat.js
    const chatJSContent = await readChatJSFile();
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const updatedContent = applyFixesToContent(chatJSContent, instructions);
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    await writeChatJSFile(updatedContent);
    
    console.log('‚úÖ Chat.js —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏!');
    return { success: true, message: 'Chat.js –æ–±–Ω–æ–≤–ª–µ–Ω —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏' };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Chat.js:', error);
    return { success: false, error: error.message };
  }
};

// –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ Chat.js
const readChatJSFile = async () => {
  try {
    const response = await fetch('/src/pages/Chat.js');
    if (!response.ok) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å Chat.js: ${response.status}`);
    }
    return await response.text();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Chat.js:', error);
    throw error;
  }
};

// –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ Chat.js
const writeChatJSFile = async (content) => {
  try {
    // –í –±—Ä–∞—É–∑–µ—Ä–µ –º—ã –Ω–µ –º–æ–∂–µ–º –Ω–∞–ø—Ä—è–º—É—é –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ñ–∞–π–ª—ã
    // –ü–æ—ç—Ç–æ–º—É —Å–æ–∑–¥–∞–µ–º blob –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∫–∞—á–∞—Ç—å
    const blob = new Blob([content], { type: 'text/javascript' });
    const url = URL.createObjectURL(blob);
    
    const a = document.createElement('a');
    a.href = url;
    a.download = 'Chat.js';
    a.click();
    
    URL.revokeObjectURL(url);
    
    console.log('üìÅ –§–∞–π–ª Chat.js –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é');
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ Chat.js:', error);
    throw error;
  }
};

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Ñ–∞–π–ª–∞
const applyFixesToContent = (content, instructions) => {
  let updatedContent = content;
  
  // 1. –û–±–Ω–æ–≤–ª—è–µ–º modelIdMap
  if (instructions.modelIdMapUpdates) {
    updatedContent = updateModelIdMapInContent(updatedContent, instructions.modelIdMapUpdates);
  }
  
  // 2. –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
  if (instructions.specialHandling) {
    updatedContent = addSpecialHandlingToContent(updatedContent, instructions.specialHandling);
  }
  
  // 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  if (instructions.parameterFixes) {
    updatedContent = fixParametersInContent(updatedContent, instructions.parameterFixes);
  }
  
  return updatedContent;
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ modelIdMap –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º —Ñ–∞–π–ª–∞
const updateModelIdMapInContent = (content, updates) => {
  console.log('–û–±–Ω–æ–≤–ª—è–µ–º modelIdMap –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º:', updates);
  
  let updatedContent = content;
  
  for (const [oldId, newId] of Object.entries(updates)) {
    // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å modelIdMap
    const modelIdMapPattern = new RegExp(`'${oldId}':\\s*'[^']*'`, 'g');
    const replacement = `'${oldId}': '${newId}'`;
    
    updatedContent = updatedContent.replace(modelIdMapPattern, replacement);
    
    console.log(`–û–±–Ω–æ–≤–ª–µ–Ω modelIdMap: ${oldId} -> ${newId}`);
  }
  
  return updatedContent;
};

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
const addSpecialHandlingToContent = (content, specialHandling) => {
  console.log('–î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:', specialHandling);
  
  let updatedContent = content;
  
  // –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
  const insertPoint = updatedContent.indexOf('// –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π');
  
  if (insertPoint === -1) {
    // –ï—Å–ª–∏ –Ω–µ—Ç –º–µ—Å—Ç–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞
    const requestPoint = updatedContent.indexOf('const response = await fetch');
    if (requestPoint !== -1) {
      const specialHandlingCode = generateSpecialHandlingCode(specialHandling);
      updatedContent = updatedContent.slice(0, requestPoint) + 
                      specialHandlingCode + '\n\n' + 
                      updatedContent.slice(requestPoint);
    }
  } else {
    // –ó–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    const endPoint = updatedContent.indexOf('}', insertPoint);
    if (endPoint !== -1) {
      const specialHandlingCode = generateSpecialHandlingCode(specialHandling);
      updatedContent = updatedContent.slice(0, insertPoint) + 
                      specialHandlingCode + 
                      updatedContent.slice(endPoint + 1);
    }
  }
  
  return updatedContent;
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
const generateSpecialHandlingCode = (specialHandling) => {
  let code = '// –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π\n';
  
  for (const [modelId, handling] of Object.entries(specialHandling)) {
    if (handling.removeParameters) {
      code += `if (modelId === '${modelId}') {\n`;
      code += `  // –£–±–∏—Ä–∞–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n`;
      code += `  const { ${handling.removeParameters.join(', ')} } = body;\n`;
      code += `  body = {\n`;
      code += `    model: modelId,\n`;
      code += `    messages: body.messages\n`;
      code += `  };\n`;
      code += `}\n\n`;
    }
    
    if (handling.useOnly) {
      code += `if (modelId === '${modelId}') {\n`;
      code += `  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n`;
      code += `  body = {\n`;
      code += `    model: modelId,\n`;
      code += `    messages: body.messages\n`;
      code += `  };\n`;
      code += `}\n\n`;
    }
  }
  
  return code;
};

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º —Ñ–∞–π–ª–∞
const fixParametersInContent = (content, parameterFixes) => {
  console.log('–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º:', parameterFixes);
  
  let updatedContent = content;
  
  for (const [modelId, fixes] of Object.entries(parameterFixes)) {
    if (fixes.remove) {
      const parameterFixCode = generateParameterFixCode(modelId, fixes);
      
      // –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      const insertPoint = updatedContent.indexOf('// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π');
      
      if (insertPoint === -1) {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞
        const requestPoint = updatedContent.indexOf('const response = await fetch');
        if (requestPoint !== -1) {
          updatedContent = updatedContent.slice(0, requestPoint) + 
                          parameterFixCode + '\n\n' + 
                          updatedContent.slice(requestPoint);
        }
      } else {
        // –ó–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const endPoint = updatedContent.indexOf('}', insertPoint);
        if (endPoint !== -1) {
          updatedContent = updatedContent.slice(0, insertPoint) + 
                          parameterFixCode + 
                          updatedContent.slice(endPoint + 1);
        }
      }
    }
  }
  
  return updatedContent;
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
const generateParameterFixCode = (modelId, fixes) => {
  let code = '// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π\n';
  
  if (fixes.remove) {
    code += `if (modelId === '${modelId}') {\n`;
    code += `  // –£–±–∏—Ä–∞–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n`;
    for (const param of fixes.remove) {
      code += `  delete body.${param};\n`;
    }
    code += `}\n\n`;
  }
  
  if (fixes.simplify) {
    code += `if (modelId === '${modelId}') {\n`;
    code += `  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n`;
    code += `  body = {\n`;
    code += `    model: modelId,\n`;
    code += `    messages: body.messages,\n`;
    code += `    temperature: body.temperature,\n`;
    code += `    top_p: body.top_p,\n`;
    code += `    max_tokens: body.max_tokens\n`;
    code += `  };\n`;
    code += `}\n\n`;
  }
  
  return code;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–¥–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
export const generateFixCode = (instructions) => {
  console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...');
  
  const fixCode = {
    modelIdMapUpdates: [],
    specialHandlingCode: [],
    parameterFixesCode: []
  };
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
  for (const [modelId, newId] of Object.entries(instructions.modelIdMapUpdates || {})) {
    fixCode.modelIdMapUpdates.push({
      modelId,
      newId,
      instruction: `–û–±–Ω–æ–≤–∏—Ç—å modelIdMap: '${modelId}': '${newId}'`
    });
  }
  
  for (const [modelId, handling] of Object.entries(instructions.specialHandling || {})) {
    if (handling.removeParameters) {
      fixCode.specialHandlingCode.push({
        modelId,
        code: `// –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è ${modelId}
if (modelId === '${modelId}') {
  // –£–±–∏—Ä–∞–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  body = {
    model: modelId,
    messages: body.messages
  };
}`
      });
    }
  }
  
  for (const [modelId, fixes] of Object.entries(instructions.parameterFixes || {})) {
    if (fixes.remove) {
      fixCode.parameterFixesCode.push({
        modelId,
        code: `// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è ${modelId}
if (modelId === '${modelId}') {
  // –£–±–∏—Ä–∞–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  ${fixes.remove.map(param => `delete body.${param};`).join('\n  ')}
}`
      });
    }
  }
  
  return fixCode;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
export const createFixInstructions = (instructions) => {
  console.log('–°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...');
  
  const instructionsList = [];
  
  // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é modelIdMap
  if (instructions.modelIdMapUpdates) {
    instructionsList.push('## –û–±–Ω–æ–≤–ª–µ–Ω–∏—è modelIdMap:');
    for (const [oldId, newId] of Object.entries(instructions.modelIdMapUpdates)) {
      instructionsList.push(`- –ó–∞–º–µ–Ω–∏—Ç—å '${oldId}': '${oldId}' –Ω–∞ '${oldId}': '${newId}'`);
    }
  }
  
  // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
  if (instructions.specialHandling) {
    instructionsList.push('\n## –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞:');
    for (const [modelId, handling] of Object.entries(instructions.specialHandling)) {
      if (handling.removeParameters) {
        instructionsList.push(`- –î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è ${modelId}: —É–±—Ä–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ${handling.removeParameters.join(', ')}`);
      }
    }
  }
  
  // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  if (instructions.parameterFixes) {
    instructionsList.push('\n## –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:');
    for (const [modelId, fixes] of Object.entries(instructions.parameterFixes)) {
      if (fixes.remove) {
        instructionsList.push(`- –î–ª—è ${modelId}: —É–±—Ä–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ${fixes.remove.join(', ')}`);
      }
    }
  }
  
  return instructionsList.join('\n');
}; 