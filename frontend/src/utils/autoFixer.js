// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏—Å–ø—Ä–∞–≤–∏—Ç–µ–ª—å - –ø—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é –∫ —Ñ–∞–π–ª–∞–º
import { applyRealFixesToChatJS } from './realChatFixer.js';

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
let testResults = null;

export const setTestResults = (results) => {
  testResults = results;
  console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º
export const autoFixAllIssues = async () => {
  console.log('ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º...');
  
  if (!testResults) {
    console.error('‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
    return { success: false, error: '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤' };
  }
  
  try {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏
    const analysis = analyzeAllErrors(testResults);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const fixes = generateAllFixes(analysis);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫ Chat.js
    const chatResult = await applyFixesToChatJS(fixes);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫ backend
    const backendResult = await applyFixesToBackend(fixes);
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    const report = createFixReport(analysis, fixes, chatResult, backendResult);
    
    console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    return { success: true, report };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏:', error);
    return { success: false, error: error.message };
  }
};

// –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
const analyzeAllErrors = (results) => {
  console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏...');
  
  const analysis = {
    modelIdIssues: {},
    parameterIssues: {},
    formatIssues: {},
    specialHandling: {},
    workingModels: [],
    brokenModels: []
  };
  
  for (const [modelId, tests] of Object.entries(results)) {
    const hasErrors = Object.values(tests).some(test => test.status === 'error');
    
    if (hasErrors) {
      analysis.brokenModels.push(modelId);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏
      for (const [testType, test] of Object.entries(tests)) {
        if (test.status === 'error') {
          const error = test.error || '';
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã
          if (error.includes('400') || error.includes('Bad Request')) {
            if (error.includes('model') || error.includes('Model')) {
              analysis.modelIdIssues[modelId] = {
                currentId: modelId,
                suggestedId: getSuggestedModelId(modelId, error),
                error: error
              };
            } else if (error.includes('parameter') || error.includes('Parameter')) {
              analysis.parameterIssues[modelId] = {
                parameters: extractParametersFromError(error),
                error: error
              };
            } else {
              analysis.formatIssues[modelId] = {
                error: error,
                needsSpecialHandling: true
              };
            }
          }
        }
      }
    } else {
      analysis.workingModels.push(modelId);
    }
  }
  
  console.log('üìã –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:', analysis);
  return analysis;
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
const generateAllFixes = (analysis) => {
  console.log('üîß –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...');
  
  const fixes = {
    modelIdMapUpdates: {},
    parameterFixes: {},
    specialHandling: {},
    backendUpdates: {}
  };
  
  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è modelIdMap
  for (const [modelId, issue] of Object.entries(analysis.modelIdIssues)) {
    if (issue.suggestedId) {
      fixes.modelIdMapUpdates[modelId] = issue.suggestedId;
    }
  }
  
  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  for (const [modelId, issue] of Object.entries(analysis.parameterIssues)) {
    fixes.parameterFixes[modelId] = {
      remove: issue.parameters,
      simplify: true
    };
  }
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
  for (const [modelId, issue] of Object.entries(analysis.formatIssues)) {
    if (issue.needsSpecialHandling) {
      fixes.specialHandling[modelId] = {
        removeParameters: ['temperature', 'top_p', 'max_tokens', 'presence_penalty', 'frequency_penalty'],
        useOnly: ['model', 'messages']
      };
    }
  }
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏—è backend
  fixes.backendUpdates = {
    modelIdMap: fixes.modelIdMapUpdates,
    specialHandling: fixes.specialHandling
  };
  
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã:', fixes);
  return fixes;
};

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫ Chat.js
const applyFixesToChatJS = async (fixes) => {
  console.log('üìù –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫ Chat.js...');
  
  try {
    const result = await applyRealFixesToChatJS(fixes);
    
    if (result.success) {
      console.log('‚úÖ Chat.js —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
      return { success: true, message: 'Chat.js –æ–±–Ω–æ–≤–ª–µ–Ω' };
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Chat.js:', result.error);
      return { success: false, error: result.error };
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫ Chat.js:', error);
    return { success: false, error: error.message };
  }
};

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫ backend
const applyFixesToBackend = async (fixes) => {
  console.log('üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫ backend...');
  
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ backend –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
    const response = await fetch('/api/apply-backend-fixes', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('token')}`
      },
      body: JSON.stringify({
        fixes: fixes.backendUpdates || fixes
      })
    });
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const result = await response.json();
    
    if (result.success) {
      console.log('‚úÖ Backend —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
      return { success: true, message: 'Backend –æ–±–Ω–æ–≤–ª–µ–Ω' };
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ backend:', result.error);
      return { success: false, error: result.error };
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ backend:', error);
    return { success: false, error: error.message };
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö
const createFixReport = (analysis, fixes, chatResult, backendResult) => {
  const report = {
    summary: {
      totalModels: analysis.workingModels.length + analysis.brokenModels.length,
      workingModels: analysis.workingModels.length,
      brokenModels: analysis.brokenModels.length,
      fixedModels: Object.keys(fixes.modelIdMapUpdates).length + 
                   Object.keys(fixes.parameterFixes).length + 
                   Object.keys(fixes.specialHandling).length
    },
    fixes: {
      modelIdUpdates: fixes.modelIdMapUpdates,
      parameterFixes: fixes.parameterFixes,
      specialHandling: fixes.specialHandling
    },
    results: {
      chat: chatResult,
      backend: backendResult
    },
    workingModels: analysis.workingModels,
    brokenModels: analysis.brokenModels
  };
  
  console.log('üìä –û—Ç—á–µ—Ç –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö:', report);
  return report;
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
const getSuggestedModelId = (currentId, error) => {
  // –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ ID –º–æ–¥–µ–ª–∏
  const suggestions = {
    'midjourney': 'midjourney-v6',
    'dalle': 'dall-e-3',
    'gpt-4': 'gpt-4-turbo',
    'gpt-3.5': 'gpt-3.5-turbo'
  };
  
  return suggestions[currentId.toLowerCase()] || currentId;
};

const extractParametersFromError = (error) => {
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –æ—à–∏–±–∫–∏
  const parameters = [];
  
  if (error.includes('temperature')) parameters.push('temperature');
  if (error.includes('top_p')) parameters.push('top_p');
  if (error.includes('max_tokens')) parameters.push('max_tokens');
  if (error.includes('presence_penalty')) parameters.push('presence_penalty');
  if (error.includes('frequency_penalty')) parameters.push('frequency_penalty');
  
  return parameters;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
export const runFullTestAndFix = async () => {
  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...');
  
  try {
    // 1. –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã (–µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã)
    if (!testResults) {
      console.log('üìä –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –º–æ–¥–µ–ª–µ–π...');
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      // testResults = await runModelTests();
    }
    
    // 2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã
    const result = await autoFixAllIssues();
    
    if (result.success) {
      console.log('üéâ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      console.log('üìä –û—Ç—á–µ—Ç:', result.report);
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ª–Ω–æ–º —Ü–∏–∫–ª–µ:', result.error);
    }
    
    return result;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ª–Ω–æ–º —Ü–∏–∫–ª–µ:', error);
    return { success: false, error: error.message };
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export const getAutoFixStatus = () => {
  return {
    hasTestResults: !!testResults,
    workingModels: testResults ? Object.keys(testResults).filter(modelId => 
      Object.values(testResults[modelId]).every(test => test.status === 'success')
    ).length : 0,
    totalModels: testResults ? Object.keys(testResults).length : 0
  };
}; 