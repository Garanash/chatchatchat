#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏—Å–ø—Ä–∞–≤–∏—Ç–µ–ª—å –¥–ª—è backend
–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫ main.py –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π
"""

import json
import re
import os
import argparse
import sys
from typing import Dict, List, Any

class BackendAutoFixer:
    def __init__(self, main_py_path: str = "main.py"):
        self.main_py_path = main_py_path
        self.backup_path = f"{main_py_path}.backup"
        
    def create_backup(self) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é main.py"""
        try:
            if os.path.exists(self.main_py_path):
                with open(self.main_py_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                with open(self.backup_path, 'w', encoding='utf-8') as f:
                    f.write(content)
                
                print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {self.backup_path}")
                return True
            else:
                print(f"‚ùå –§–∞–π–ª {self.main_py_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            return False
    
    def restore_backup(self) -> bool:
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç main.py –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        try:
            if os.path.exists(self.backup_path):
                with open(self.backup_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                with open(self.main_py_path, 'w', encoding='utf-8') as f:
                    f.write(content)
                
                print(f"‚úÖ –§–∞–π–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
                return True
            else:
                print(f"‚ùå –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
            return False
    
    def read_main_py(self) -> str:
        """–ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ main.py"""
        try:
            with open(self.main_py_path, 'r', encoding='utf-8') as f:
                return f.read()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {self.main_py_path}: {e}")
            return ""
    
    def write_main_py(self, content: str) -> bool:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ main.py"""
        try:
            with open(self.main_py_path, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"‚úÖ –§–∞–π–ª {self.main_py_path} –æ–±–Ω–æ–≤–ª–µ–Ω")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ {self.main_py_path}: {e}")
            return False
    
    def update_model_id_map(self, content: str, updates: Dict[str, str]) -> str:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç modelIdMap –≤ main.py"""
        print(f"üîß –û–±–Ω–æ–≤–ª—è–µ–º modelIdMap: {updates}")
        
        updated_content = content
        
        for old_id, new_id in updates.items():
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å modelIdMap
            pattern = rf"'{old_id}':\s*'[^']*'"
            replacement = f"'{old_id}': '{new_id}'"
            
            if re.search(pattern, updated_content):
                updated_content = re.sub(pattern, replacement, updated_content)
                print(f"  ‚úÖ {old_id} ‚Üí {new_id}")
            else:
                print(f"  ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {old_id}")
        
        return updated_content
    
    def add_special_handling(self, content: str, special_handling: Dict[str, Any]) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –º–æ–¥–µ–ª–µ–π"""
        print(f"‚öôÔ∏è –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É: {list(special_handling.keys())}")
        
        # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        insert_point = content.find("# –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
        
        if insert_point == -1:
            # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ—Å—Ç–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞
            insert_point = content.find("async def chat_completion")
            if insert_point == -1:
                print("  ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return content
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        special_handling_code = self.generate_special_handling_code(special_handling)
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–¥
        updated_content = (
            content[:insert_point] + 
            special_handling_code + "\n\n" + 
            content[insert_point:]
        )
        
        return updated_content
    
    def generate_special_handling_code(self, special_handling: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        code = "# –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π\n"
        
        for model_id, handling in special_handling.items():
            if 'removeParameters' in handling:
                code += f"if model_id == '{model_id}':\n"
                code += f"    # –£–±–∏—Ä–∞–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n"
                code += f"    body = {{\n"
                code += f"        'model': model_id,\n"
                code += f"        'messages': body['messages']\n"
                code += f"    }}\n\n"
        
        return code
    
    def fix_parameters(self, content: str, parameter_fixes: Dict[str, Any]) -> str:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–æ–¥–µ–ª–µ–π"""
        print(f"üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {list(parameter_fixes.keys())}")
        
        # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        insert_point = content.find("# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
        
        if insert_point == -1:
            # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ—Å—Ç–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞
            insert_point = content.find("async def chat_completion")
            if insert_point == -1:
                print("  ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
                return content
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        parameter_fixes_code = self.generate_parameter_fixes_code(parameter_fixes)
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–¥
        updated_content = (
            content[:insert_point] + 
            parameter_fixes_code + "\n\n" + 
            content[insert_point:]
        )
        
        return updated_content
    
    def generate_parameter_fixes_code(self, parameter_fixes: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        code = "# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π\n"
        
        for model_id, fixes in parameter_fixes.items():
            if 'remove' in fixes:
                code += f"if model_id == '{model_id}':\n"
                code += f"    # –£–±–∏—Ä–∞–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n"
                for param in fixes['remove']:
                    code += f"    body.pop('{param}', None)\n"
                code += "\n"
        
        return code
    
    def apply_fixes(self, fixes: Dict[str, Any]) -> Dict[str, Any]:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫ main.py"""
        print("ü§ñ –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫ backend...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            if not self.create_backup():
                return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"}
            
            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
            content = self.read_main_py()
            if not content:
                return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å main.py"}
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            updated_content = content
            
            # 1. –û–±–Ω–æ–≤–ª—è–µ–º modelIdMap
            if 'modelIdMapUpdates' in fixes:
                updated_content = self.update_model_id_map(updated_content, fixes['modelIdMapUpdates'])
            
            # 2. –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            if 'specialHandling' in fixes:
                updated_content = self.add_special_handling(updated_content, fixes['specialHandling'])
            
            # 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if 'parameterFixes' in fixes:
                updated_content = self.fix_parameters(updated_content, fixes['parameterFixes'])
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if self.write_main_py(updated_content):
                return {"success": True, "message": "Backend —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"}
            else:
                return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"}
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")
            return {"success": False, "error": str(e)}
    
    def generate_fix_report(self, fixes: Dict[str, Any], result: Dict[str, Any]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö"""
        report = {
            "summary": {
                "modelIdUpdates": len(fixes.get('modelIdMapUpdates', {})),
                "specialHandling": len(fixes.get('specialHandling', {})),
                "parameterFixes": len(fixes.get('parameterFixes', {}))
            },
            "fixes": fixes,
            "result": result
        }
        
        return report

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    parser = argparse.ArgumentParser(description='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏—Å–ø—Ä–∞–≤–∏—Ç–µ–ª—å backend')
    parser.add_argument('--fixes', type=str, help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏')
    parser.add_argument('--test', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç')
    parser.add_argument('--restore', action='store_true', help='–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏')
    
    args = parser.parse_args()
    
    fixer = BackendAutoFixer()
    
    if args.test:
        # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
        test_fixes = {
            "modelIdMapUpdates": {
                "midjourney": "midjourney-v6",
                "dalle": "dall-e-3"
            },
            "specialHandling": {
                "midjourney": {
                    "removeParameters": ["temperature", "top_p", "max_tokens"]
                }
            },
            "parameterFixes": {
                "openai/codex": {
                    "remove": ["frequency_penalty", "presence_penalty"]
                }
            }
        }
        
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏—Å–ø—Ä–∞–≤–∏—Ç–µ–ª—å backend...")
        result = fixer.apply_fixes(test_fixes)
        
        if result["success"]:
            print("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!")
            report = fixer.generate_fix_report(test_fixes, result)
            print(f"üìä –û—Ç—á–µ—Ç: {report}")
        else:
            print(f"‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {result['error']}")
            sys.exit(1)
    
    elif args.fixes:
        # –†–µ–∂–∏–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        try:
            with open(args.fixes, 'r', encoding='utf-8') as f:
                fixes = json.load(f)
            
            print(f"üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞: {args.fixes}")
            result = fixer.apply_fixes(fixes)
            
            if result["success"]:
                print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")
                report = fixer.generate_fix_report(fixes, result)
                print(f"üìä –û—Ç—á–µ—Ç: {json.dumps(report, ensure_ascii=False, indent=2)}")
                sys.exit(0)
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {result['error']}")
                sys.exit(1)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")
            sys.exit(1)
    
    elif args.restore:
        # –†–µ–∂–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        print("üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
        if fixer.restore_backup():
            print("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            sys.exit(0)
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")
            sys.exit(1)
    
    else:
        print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å --fixes, --test –∏–ª–∏ --restore")
        sys.exit(1)

if __name__ == "__main__":
    main() 