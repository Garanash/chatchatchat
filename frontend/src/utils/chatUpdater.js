// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ–±–Ω–æ–≤–ª—è—Ç–µ–ª—å Chat.js
// –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

export const updateChatJSWithFixes = async (instructions) => {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Chat.js...');
  
  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º modelIdMap
    await updateModelIdMap(instructions.modelIdMapUpdates);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    await addSpecialHandling(instructions.specialHandling);
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    await fixParameters(instructions.parameterFixes);
    
    console.log('‚úÖ Chat.js —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
    return { success: true, message: 'Chat.js –æ–±–Ω–æ–≤–ª–µ–Ω —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏' };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Chat.js:', error);
    return { success: false, error: error.message };
  }
};

const updateModelIdMap = async (updates) => {
  console.log('–û–±–Ω–æ–≤–ª—è–µ–º modelIdMap:', updates);
  
  // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è modelIdMap –≤ Chat.js
  // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
  
  for (const [oldId, newId] of Object.entries(updates)) {
    console.log(`–û–±–Ω–æ–≤–ª—è–µ–º ${oldId} -> ${newId}`);
  }
};

const addSpecialHandling = async (specialHandling) => {
  console.log('–î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É:', specialHandling);
  
  // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ Chat.js
  
  for (const [modelId, handling] of Object.entries(specialHandling)) {
    console.log(`–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è ${modelId}:`, handling);
  }
};

const fixParameters = async (parameterFixes) => {
  console.log('–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', parameterFixes);
  
  // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ Chat.js
  
  for (const [modelId, fixes] of Object.entries(parameterFixes)) {
    console.log(`–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è ${modelId}:`, fixes);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫ Chat.js
export const applyChatFixes = async () => {
  const savedFixes = localStorage.getItem('chatFixes');
  
  if (!savedFixes) {
    console.log('–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π');
    return { success: false, message: '–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π' };
  }
  
  try {
    const instructions = JSON.parse(savedFixes);
    const result = await updateChatJSWithFixes(instructions);
    
    if (result.success) {
      localStorage.removeItem('chatFixes'); // –û—á–∏—â–∞–µ–º –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
    }
    
    return result;
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:', error);
    return { success: false, error: error.message };
  }
}; 